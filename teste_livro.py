#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste de Sistema - Cadastro de Livro
Biblioteca Arco-√çris

Este script automatiza o teste de cadastro de livro no site da Biblioteca Arco-√çris.
Ele preenche todos os campos obrigat√≥rios e clica no bot√£o de salvar.
"""

import time
import random
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException

try:
    from webdriver_manager.chrome import ChromeDriverManager
    WEBDRIVER_MANAGER_AVAILABLE = True
except ImportError:
    WEBDRIVER_MANAGER_AVAILABLE = False
    print("üí° webdriver-manager n√£o instalado. Execute: pip install webdriver-manager")

class TesteLivro:
    def __init__(self):
        """Inicializa o driver do navegador"""
        self.driver = None
        self.wait = None
        
    def configurar_navegador(self):
        """Configura o navegador Chrome com op√ß√µes adequadas"""
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        
        # Comentar a linha abaixo se quiser ver o navegador em a√ß√£o
        # chrome_options.add_argument("--headless")
        
        print("Tentando configurar o navegador Chrome...")
        
        # Tenta diferentes m√©todos de inicializa√ß√£o
        metodos = []
        
        # M√©todo 1: Com webdriver-manager (se dispon√≠vel)
        if WEBDRIVER_MANAGER_AVAILABLE:
            metodos.append(("webdriver-manager", self._inicializar_com_webdriver_manager))
        
        # M√©todo 2: ChromeDriver no PATH
        metodos.append(("PATH", self._inicializar_com_path))
        
        # M√©todo 3: ChromeDriver no diret√≥rio atual
        metodos.append(("diret√≥rio atual", self._inicializar_com_diretorio_atual))
        
        for nome_metodo, metodo in metodos:
            try:
                print(f"üîÑ Tentando m√©todo: {nome_metodo}")
                self.driver = metodo(chrome_options)
                if self.driver:
                    self.wait = WebDriverWait(self.driver, 10)
                    print(f"‚úÖ Navegador configurado com sucesso usando: {nome_metodo}")
                    return True
            except Exception as e:
                print(f"‚ùå M√©todo {nome_metodo} falhou: {e}")
                continue
        
        print("‚ùå Todos os m√©todos de inicializa√ß√£o falharam!")
        print("üí° Solu√ß√µes poss√≠veis:")
        print("   1. Instale webdriver-manager: pip install webdriver-manager")
        print("   2. Baixe ChromeDriver manualmente e coloque no PATH")
        print("   3. Coloque chromedriver.exe na pasta do projeto")
        return False
    
    def _inicializar_com_webdriver_manager(self, chrome_options):
        """Inicializa usando webdriver-manager"""
        service = Service(ChromeDriverManager().install())
        return webdriver.Chrome(service=service, options=chrome_options)
    
    def _inicializar_com_path(self, chrome_options):
        """Inicializa usando ChromeDriver no PATH"""
        return webdriver.Chrome(options=chrome_options)
    
    def _inicializar_com_diretorio_atual(self, chrome_options):
        """Inicializa usando ChromeDriver no diret√≥rio atual"""
        service = Service("./chromedriver.exe")
        return webdriver.Chrome(service=service, options=chrome_options)
    
    def gerar_dados_livro(self):
        """Gera dados de teste √∫nicos para o livro"""
        numero_aleatorio = random.randint(1000, 9999)
        
        # Lista de t√≠tulos fict√≠cios
        titulos = [
            "Aventuras", "Mist√©rios", "Hist√≥rias", "Contos", "Cr√¥nicas", 
            "Mem√≥rias", "Di√°rios", "Reflex√µes", "Descobertas", "Jornadas"
        ]
        sufixos = [
            "do Tempo", "da Vida", "Imagin√°ria", "Perdida", "Secreta",
            "Fant√°stica", "M√°gica", "Incr√≠vel", "Extraordin√°ria", "√önica"
        ]
        
        titulo_livro = f"{random.choice(titulos)} {random.choice(sufixos)} {numero_aleatorio}"
        
        # Lista de autores fict√≠cios
        autores = [
            "Jo√£o Silva", "Maria Santos", "Pedro Oliveira", "Ana Costa", "Carlos Lima",
            "Lucia Ferreira", "Roberto Alves", "Fernanda Rocha", "Marcos Pereira", "Juliana Dias"
        ]
        
        # Lista de editoras fict√≠cias
        editoras = [
            "Editora Liter√°ria", "Casa do Livro", "Publica√ß√µes Culturais", 
            "Editora Saber", "Livros & Cia", "Editora Conhecimento"
        ]
        
        # Lista de idiomas
        idiomas = ["Portugu√™s", "Ingl√™s", "Espanhol", "Franc√™s", "Italiano"]
        
        # Lista de categorias
        categorias = [
            "Fic√ß√£o", "Romance", "Aventura", "Mist√©rio", "Fantasia",
            "Terror", "Drama", "Com√©dia", "Biografia", "Hist√≥ria"
        ]
        
        dados = {
            'titulo': titulo_livro,
            'estoque': random.randint(1, 50),
            'autor': random.choice(autores),
            'dataPublicacao': random.randint(1950, 2024),
            'numeroPaginas': random.randint(100, 800),
            'editora': random.choice(editoras),
            'isbn': f'978-{numero_aleatorio:03d}-{numero_aleatorio:02d}-{numero_aleatorio:04d}-{numero_aleatorio % 10}',
            'idioma': random.choice(idiomas),
            'categoria': random.choice(categorias),
            'descricao': f"Uma obra fascinante que narra {titulo_livro.lower()}. Este livro oferece uma experi√™ncia √∫nica de leitura, combinando elementos de {random.choice(categorias).lower()} com uma narrativa envolvente que prende o leitor do in√≠cio ao fim."
        }
        
        print(f"üìù Dados do livro gerados:")
        for campo, valor in dados.items():
            print(f"   {campo}: {valor}")
        
        return dados
    
    def acessar_pagina_admin(self, url_base="http://localhost/Biblioteca-Arco-Iris-Manual/HTML/admin-publico.php"):
        """Acessa a p√°gina de administra√ß√£o"""
        try:
            print(f"üåê Acessando: {url_base}")
            self.driver.get(url_base)
            
            # Aguarda a p√°gina carregar
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
            print("‚úÖ P√°gina de administra√ß√£o carregada com sucesso!")
            return True
            
        except TimeoutException:
            print("‚ùå Timeout ao carregar a p√°gina de administra√ß√£o")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao acessar p√°gina: {e}")
            return False
    
    def abrir_modal_livro(self):
        """Abre o modal de cadastro de livro"""
        try:
            print("üìñ Abrindo modal de cadastro de livro...")
            
            # Procura pelo bot√£o "Adicionar Novo Livro"
            botao_adicionar = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Adicionar Novo Livro')]"))
            )
            
            # Clica no bot√£o
            botao_adicionar.click()
            print("‚úÖ Bot√£o 'Adicionar Novo Livro' clicado")
            
            # Aguarda o modal aparecer
            self.wait.until(EC.presence_of_element_located((By.ID, "bookModal")))
            print("‚úÖ Modal de cadastro de livro aberto!")
            return True
            
        except TimeoutException:
            print("‚ùå Timeout ao abrir modal de cadastro de livro")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao abrir modal: {e}")
            return False
    
    def preencher_formulario_livro(self, dados):
        """Preenche todos os campos do formul√°rio de livro"""
        try:
            print("üìù Preenchendo formul√°rio de livro...")
            
            # Mapeamento dos campos
            campos = {
                'titulo': dados['titulo'],
                'estoque': str(dados['estoque']),
                'autor': dados['autor'],  # Envia o nome do autor
                'dataPublicacao': str(dados['dataPublicacao']),
                'numeroPaginas': str(dados['numeroPaginas']),
                'editora': dados['editora'],
                'isbn': dados['isbn'],
                'idioma': dados['idioma'],
                'categoria': dados['categoria'],  # Envia o nome da categoria
                'descricao': dados['descricao']
            }
            
            # Preenche cada campo
            for nome_campo, valor in campos.items():
                try:
                    campo = self.driver.find_element(By.ID, nome_campo)
                    campo.clear()
                    campo.send_keys(valor)
                    print(f"   ‚úÖ Campo '{nome_campo}' preenchido")
                    time.sleep(0.3)  # Pequena pausa entre campos
                    
                except NoSuchElementException:
                    print(f"   ‚ùå Campo '{nome_campo}' n√£o encontrado")
                    return False
            
            # Upload de imagem (opcional - cria um arquivo tempor√°rio se necess√°rio)
            try:
                campo_imagem = self.driver.find_element(By.ID, "capa")
                # Cria um arquivo tempor√°rio para o teste
                import tempfile
                import os
                
                # Cria um arquivo de imagem tempor√°rio
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                    temp_file.write(b'fake_image_data')
                    temp_path = temp_file.name
                
                # Envia o arquivo tempor√°rio
                campo_imagem.send_keys(temp_path)
                print("   ‚úÖ Imagem tempor√°ria enviada para teste")
                
                # N√ÉO remove o arquivo tempor√°rio aqui - deixa para o PHP processar
                # O arquivo ser√° removido automaticamente pelo sistema
                
            except NoSuchElementException:
                print("   ‚ö†Ô∏è Campo de imagem n√£o encontrado")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao enviar imagem: {e}")
            
            print("‚úÖ Formul√°rio de livro preenchido com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao preencher formul√°rio: {e}")
            return False
    
    def clicar_salvar_livro(self):
        """Clica no bot√£o de salvar livro"""
        try:
            print("üñ±Ô∏è Clicando no bot√£o SALVAR...")
            
            # Procura pelo bot√£o de submit
            botao_salvar = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "#bookForm button[type='submit']"))
            )
            
            # Rola at√© o bot√£o para garantir que est√° vis√≠vel
            self.driver.execute_script("arguments[0].scrollIntoView(true);", botao_salvar)
            time.sleep(1)
            
            # Clica no bot√£o
            botao_salvar.click()
            print("‚úÖ Bot√£o SALVAR clicado com sucesso!")
            
            # Aguarda um pouco para o processamento
            time.sleep(3)
            
            return True
            
        except TimeoutException:
            print("‚ùå Timeout ao clicar no bot√£o SALVAR")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao clicar no bot√£o: {e}")
            return False
    
    def aguardar_processamento(self):
        """Aguarda o processamento do cadastro"""
        try:
            print("‚è≥ Aguardando processamento...")
            time.sleep(5)  # Aguarda mais tempo para o processamento
            
            # Aguarda o modal fechar ou mudan√ßa na p√°gina
            try:
                self.wait.until(lambda driver: not driver.find_element(By.ID, "bookModal").is_displayed())
                print("‚úÖ Modal fechado")
            except:
                print("‚ö†Ô∏è Modal n√£o fechou, mas continuando...")
            
            print("‚úÖ Processamento conclu√≠do")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao aguardar processamento: {e}")
            return False
    
    def executar_teste(self):
        """Executa o teste completo de cadastro de livro"""
        print("üöÄ Iniciando teste de sistema - Cadastro de Livro")
        print("=" * 60)
        
        sucesso = True
        
        # 1. Configurar navegador
        if not self.configurar_navegador():
            return False
        
        try:
            # 2. Gerar dados de teste
            dados = self.gerar_dados_livro()
            
            # 3. Acessar p√°gina de administra√ß√£o
            if not self.acessar_pagina_admin():
                sucesso = False
            
            # 4. Abrir modal de cadastro
            elif not self.abrir_modal_livro():
                sucesso = False
            
            # 5. Preencher formul√°rio
            elif not self.preencher_formulario_livro(dados):
                sucesso = False
            
            # 6. Clicar em salvar
            elif not self.clicar_salvar_livro():
                sucesso = False
            
            # 7. Aguardar processamento
            elif not self.aguardar_processamento():
                sucesso = False
            
            # Resultado final
            print("=" * 60)
            if sucesso:
                print("‚úÖ Livro registrado no banco de dados")
            else:
                print("‚ùå Erro no registro do livro")
            
            return sucesso
            
        finally:
            # Aguarda um pouco antes de fechar para visualizar o resultado
            if self.driver:
                print("üëÄ Mantendo navegador aberto por 3 segundos para visualiza√ß√£o...")
                time.sleep(3)
                print("üîí Fechando navegador...")
                self.driver.quit()
            
            # Limpa arquivos tempor√°rios se existirem
            try:
                import tempfile
                import os
                temp_dir = tempfile.gettempdir()
                for file in os.listdir(temp_dir):
                    if file.startswith('tmp') and file.endswith('.jpg'):
                        try:
                            os.unlink(os.path.join(temp_dir, file))
                        except:
                            pass
            except:
                pass

def main():
    """Fun√ß√£o principal"""
    print("Biblioteca Arco-√çris - Teste de Sistema")
    print("Teste de Cadastro de Livro")
    print()
    
    # Verifica se o Selenium est√° instalado
    try:
        import selenium
        print(f"‚úÖ Selenium vers√£o {selenium.__version__} detectado")
    except ImportError:
        print("‚ùå Selenium n√£o est√° instalado!")
        print("Execute: pip install selenium")
        return
    
    # Executa o teste
    teste = TesteLivro()
    resultado = teste.executar_teste()
    
    # C√≥digo de sa√≠da
    exit(0 if resultado else 1)

if __name__ == "__main__":
    main()
